//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的。
//
//    手动更改此文件可能会导致应用程序中发生异常行为。 
//    如果重新生成代码，则将覆盖对此文件的手动更改。        
// </auto-generated>
//------------------------------------------------------------------------------ 

namespace UQing.Hr.EntityMapping
{
    using UQing.Hr.Model;
    using UQing.Hr.Model.ModelViews;
    using AutoMapper;
    
    public static class EntityMapper
    {
        /// <summary>
        /// 负责将所有实体做一次映射操作
        /// </summary>
        static EntityMapper()
        {
            //1.0 将Model和ModelViews中的所有实体类在AutoMapper内部建立一个关联
            Mapper.CreateMap<CareerPlanning, CareerPlanningView>();
            Mapper.CreateMap<ChannelCnvestment, ChannelCnvestmentView>();
            Mapper.CreateMap<ChatReacord, ChatReacordView>();
            Mapper.CreateMap<CooperativePartner, CooperativePartnerView>();
            Mapper.CreateMap<FeedBack, FeedBackView>();
            Mapper.CreateMap<FriendApply, FriendApplyView>();
            Mapper.CreateMap<Friend, FriendView>();
            Mapper.CreateMap<JobTraining, JobTrainingView>();
            Mapper.CreateMap<OrderTime, OrderTimeView>();
            Mapper.CreateMap<Person, PersonView>();
            Mapper.CreateMap<Person_BlackList, Person_BlackListView>();
            Mapper.CreateMap<Person_Collection, Person_CollectionView>();
            Mapper.CreateMap<Person_Evaluate, Person_EvaluateView>();
            Mapper.CreateMap<Person_ExpectWork, Person_ExpectWorkView>();
            Mapper.CreateMap<Person_Follow, Person_FollowView>();
            Mapper.CreateMap<Person_Message, Person_MessageView>();
            Mapper.CreateMap<Person_PayCheck, Person_PayCheckView>();
            Mapper.CreateMap<Person_Project, Person_ProjectView>();
            Mapper.CreateMap<Person_Report, Person_ReportView>();
            Mapper.CreateMap<Person_Representations, Person_RepresentationsView>();
            Mapper.CreateMap<Person_Reward, Person_RewardView>();
            Mapper.CreateMap<Person_Reward_Matching, Person_Reward_MatchingView>();
            Mapper.CreateMap<Person_Skill, Person_SkillView>();
            Mapper.CreateMap<Person_Test, Person_TestView>();
            Mapper.CreateMap<Person_Work, Person_WorkView>();
            Mapper.CreateMap<PostInfo, PostInfoView>();
            Mapper.CreateMap<PostType, PostTypeView>();
            Mapper.CreateMap<PresentApplication, PresentApplicationView>();
            Mapper.CreateMap<PresentApplication_Batch, PresentApplication_BatchView>();
            Mapper.CreateMap<Reward_Order, Reward_OrderView>();
            Mapper.CreateMap<Role, RoleView>();
            Mapper.CreateMap<ServerUser, ServerUserView>();
            Mapper.CreateMap<ServerUser_BlackList, ServerUser_BlackListView>();
            Mapper.CreateMap<ServerUser_Collection, ServerUser_CollectionView>();
            Mapper.CreateMap<ServerUser_Education, ServerUser_EducationView>();
            Mapper.CreateMap<ServerUser_Evaluate, ServerUser_EvaluateView>();
            Mapper.CreateMap<ServerUser_Follow, ServerUser_FollowView>();
            Mapper.CreateMap<ServerUser_Message, ServerUser_MessageView>();
            Mapper.CreateMap<ServerUser_Post, ServerUser_PostView>();
            Mapper.CreateMap<ServerUser_Report, ServerUser_ReportView>();
            Mapper.CreateMap<ServerUser_Tag, ServerUser_TagView>();
            Mapper.CreateMap<ServerUser_Work, ServerUser_WorkView>();
            Mapper.CreateMap<Sys_Logs, Sys_LogsView>();
            Mapper.CreateMap<TransactionRecord, TransactionRecordView>();
            Mapper.CreateMap<User_Managers, User_ManagersView>();
            Mapper.CreateMap<WelfareTag, WelfareTagView>();
            Mapper.CreateMap<aTemp, aTempView>();
            Mapper.CreateMap<News, NewsView>();
            Mapper.CreateMap<NewsType, NewsTypeView>();
            Mapper.CreateMap<Person_Education, Person_EducationView>();
            Mapper.CreateMap<PhoneCode, PhoneCodeView>();
            Mapper.CreateMap<sys_City, sys_CityView>();
            Mapper.CreateMap<View_News, View_NewsView>();
            Mapper.CreateMap<View_Person_Evaluate, View_Person_EvaluateView>();
            Mapper.CreateMap<View_Person_Order, View_Person_OrderView>();
            Mapper.CreateMap<View_PersonFriend, View_PersonFriendView>();
            Mapper.CreateMap<View_PersonFriendApply, View_PersonFriendApplyView>();
            Mapper.CreateMap<View_Representations, View_RepresentationsView>();
            Mapper.CreateMap<View_Reward_Order, View_Reward_OrderView>();
            Mapper.CreateMap<View_RewardList, View_RewardListView>();
            Mapper.CreateMap<View_SerUser_Reward_Mat_Post, View_SerUser_Reward_Mat_PostView>();
            Mapper.CreateMap<View_SerUserFriend, View_SerUserFriendView>();
            Mapper.CreateMap<View_SerUserOrderDetail, View_SerUserOrderDetailView>();
            Mapper.CreateMap<View_SerUserRewardDetail, View_SerUserRewardDetailView>();
            Mapper.CreateMap<View_SerUserReword, View_SerUserRewordView>();
            Mapper.CreateMap<View_ServerUser_Evaluate, View_ServerUser_EvaluateView>();
            Mapper.CreateMap<View_ServerUser_Post, View_ServerUser_PostView>();
            Mapper.CreateMap<View_ServerUserFriendApply, View_ServerUserFriendApplyView>();
            Mapper.CreateMap<View_SysLog, View_SysLogView>();
            Mapper.CreateMap<View_User_Managers, View_User_ManagersView>();
            Mapper.CreateMap<WorkPostFilterInfo, WorkPostFilterInfoView>();
            Mapper.CreateMap<WorkPostFilterType, WorkPostFilterTypeView>();
            Mapper.CreateMap<View_WorkPostFilterInfo, View_WorkPostFilterInfoView>();
            Mapper.CreateMap<View_CompnayInfo, View_CompnayInfoView>();
            Mapper.CreateMap<View_PersonInfo, View_PersonInfoView>();
            Mapper.CreateMap<View_ServerUserInfo, View_ServerUserInfoView>();
            Mapper.CreateMap<View_NewsestRecruit, View_NewsestRecruitView>();
    
            //2.0 将ModelViews和Model中的所有实体类在AutoMapper内部建立一个关联
            Mapper.CreateMap<CareerPlanningView, CareerPlanning>();
            Mapper.CreateMap<ChannelCnvestmentView, ChannelCnvestment>();
            Mapper.CreateMap<ChatReacordView, ChatReacord>();
            Mapper.CreateMap<CooperativePartnerView, CooperativePartner>();
            Mapper.CreateMap<FeedBackView, FeedBack>();
            Mapper.CreateMap<FriendApplyView, FriendApply>();
            Mapper.CreateMap<FriendView, Friend>();
            Mapper.CreateMap<JobTrainingView, JobTraining>();
            Mapper.CreateMap<OrderTimeView, OrderTime>();
            Mapper.CreateMap<PersonView, Person>();
            Mapper.CreateMap<Person_BlackListView, Person_BlackList>();
            Mapper.CreateMap<Person_CollectionView, Person_Collection>();
            Mapper.CreateMap<Person_EvaluateView, Person_Evaluate>();
            Mapper.CreateMap<Person_ExpectWorkView, Person_ExpectWork>();
            Mapper.CreateMap<Person_FollowView, Person_Follow>();
            Mapper.CreateMap<Person_MessageView, Person_Message>();
            Mapper.CreateMap<Person_PayCheckView, Person_PayCheck>();
            Mapper.CreateMap<Person_ProjectView, Person_Project>();
            Mapper.CreateMap<Person_ReportView, Person_Report>();
            Mapper.CreateMap<Person_RepresentationsView, Person_Representations>();
            Mapper.CreateMap<Person_RewardView, Person_Reward>();
            Mapper.CreateMap<Person_Reward_MatchingView, Person_Reward_Matching>();
            Mapper.CreateMap<Person_SkillView, Person_Skill>();
            Mapper.CreateMap<Person_TestView, Person_Test>();
            Mapper.CreateMap<Person_WorkView, Person_Work>();
            Mapper.CreateMap<PostInfoView, PostInfo>();
            Mapper.CreateMap<PostTypeView, PostType>();
            Mapper.CreateMap<PresentApplicationView, PresentApplication>();
            Mapper.CreateMap<PresentApplication_BatchView, PresentApplication_Batch>();
            Mapper.CreateMap<Reward_OrderView, Reward_Order>();
            Mapper.CreateMap<RoleView, Role>();
            Mapper.CreateMap<ServerUserView, ServerUser>();
            Mapper.CreateMap<ServerUser_BlackListView, ServerUser_BlackList>();
            Mapper.CreateMap<ServerUser_CollectionView, ServerUser_Collection>();
            Mapper.CreateMap<ServerUser_EducationView, ServerUser_Education>();
            Mapper.CreateMap<ServerUser_EvaluateView, ServerUser_Evaluate>();
            Mapper.CreateMap<ServerUser_FollowView, ServerUser_Follow>();
            Mapper.CreateMap<ServerUser_MessageView, ServerUser_Message>();
            Mapper.CreateMap<ServerUser_PostView, ServerUser_Post>();
            Mapper.CreateMap<ServerUser_ReportView, ServerUser_Report>();
            Mapper.CreateMap<ServerUser_TagView, ServerUser_Tag>();
            Mapper.CreateMap<ServerUser_WorkView, ServerUser_Work>();
            Mapper.CreateMap<Sys_LogsView, Sys_Logs>();
            Mapper.CreateMap<TransactionRecordView, TransactionRecord>();
            Mapper.CreateMap<User_ManagersView, User_Managers>();
            Mapper.CreateMap<WelfareTagView, WelfareTag>();
            Mapper.CreateMap<aTempView, aTemp>();
            Mapper.CreateMap<NewsView, News>();
            Mapper.CreateMap<NewsTypeView, NewsType>();
            Mapper.CreateMap<Person_EducationView, Person_Education>();
            Mapper.CreateMap<PhoneCodeView, PhoneCode>();
            Mapper.CreateMap<sys_CityView, sys_City>();
            Mapper.CreateMap<View_NewsView, View_News>();
            Mapper.CreateMap<View_Person_EvaluateView, View_Person_Evaluate>();
            Mapper.CreateMap<View_Person_OrderView, View_Person_Order>();
            Mapper.CreateMap<View_PersonFriendView, View_PersonFriend>();
            Mapper.CreateMap<View_PersonFriendApplyView, View_PersonFriendApply>();
            Mapper.CreateMap<View_RepresentationsView, View_Representations>();
            Mapper.CreateMap<View_Reward_OrderView, View_Reward_Order>();
            Mapper.CreateMap<View_RewardListView, View_RewardList>();
            Mapper.CreateMap<View_SerUser_Reward_Mat_PostView, View_SerUser_Reward_Mat_Post>();
            Mapper.CreateMap<View_SerUserFriendView, View_SerUserFriend>();
            Mapper.CreateMap<View_SerUserOrderDetailView, View_SerUserOrderDetail>();
            Mapper.CreateMap<View_SerUserRewardDetailView, View_SerUserRewardDetail>();
            Mapper.CreateMap<View_SerUserRewordView, View_SerUserReword>();
            Mapper.CreateMap<View_ServerUser_EvaluateView, View_ServerUser_Evaluate>();
            Mapper.CreateMap<View_ServerUser_PostView, View_ServerUser_Post>();
            Mapper.CreateMap<View_ServerUserFriendApplyView, View_ServerUserFriendApply>();
            Mapper.CreateMap<View_SysLogView, View_SysLog>();
            Mapper.CreateMap<View_User_ManagersView, View_User_Managers>();
            Mapper.CreateMap<WorkPostFilterInfoView, WorkPostFilterInfo>();
            Mapper.CreateMap<WorkPostFilterTypeView, WorkPostFilterType>();
            Mapper.CreateMap<View_WorkPostFilterInfoView, View_WorkPostFilterInfo>();
            Mapper.CreateMap<View_CompnayInfoView, View_CompnayInfo>();
            Mapper.CreateMap<View_PersonInfoView, View_PersonInfo>();
            Mapper.CreateMap<View_ServerUserInfoView, View_ServerUserInfo>();
            Mapper.CreateMap<View_NewsestRecruitView, View_NewsestRecruit>();
        }
    
        //3.0 生成所有实体的两个转换扩展方法
        //3.0.1 Model -> ModelView
    	public static CareerPlanning EntityMap(this CareerPlanningView model)
    	{
    		return Mapper.Map<CareerPlanningView, CareerPlanning>(model);
    	}
    	public static ChannelCnvestment EntityMap(this ChannelCnvestmentView model)
    	{
    		return Mapper.Map<ChannelCnvestmentView, ChannelCnvestment>(model);
    	}
    	public static ChatReacord EntityMap(this ChatReacordView model)
    	{
    		return Mapper.Map<ChatReacordView, ChatReacord>(model);
    	}
    	public static CooperativePartner EntityMap(this CooperativePartnerView model)
    	{
    		return Mapper.Map<CooperativePartnerView, CooperativePartner>(model);
    	}
    	public static FeedBack EntityMap(this FeedBackView model)
    	{
    		return Mapper.Map<FeedBackView, FeedBack>(model);
    	}
    	public static FriendApply EntityMap(this FriendApplyView model)
    	{
    		return Mapper.Map<FriendApplyView, FriendApply>(model);
    	}
    	public static Friend EntityMap(this FriendView model)
    	{
    		return Mapper.Map<FriendView, Friend>(model);
    	}
    	public static JobTraining EntityMap(this JobTrainingView model)
    	{
    		return Mapper.Map<JobTrainingView, JobTraining>(model);
    	}
    	public static OrderTime EntityMap(this OrderTimeView model)
    	{
    		return Mapper.Map<OrderTimeView, OrderTime>(model);
    	}
    	public static Person EntityMap(this PersonView model)
    	{
    		return Mapper.Map<PersonView, Person>(model);
    	}
    	public static Person_BlackList EntityMap(this Person_BlackListView model)
    	{
    		return Mapper.Map<Person_BlackListView, Person_BlackList>(model);
    	}
    	public static Person_Collection EntityMap(this Person_CollectionView model)
    	{
    		return Mapper.Map<Person_CollectionView, Person_Collection>(model);
    	}
    	public static Person_Evaluate EntityMap(this Person_EvaluateView model)
    	{
    		return Mapper.Map<Person_EvaluateView, Person_Evaluate>(model);
    	}
    	public static Person_ExpectWork EntityMap(this Person_ExpectWorkView model)
    	{
    		return Mapper.Map<Person_ExpectWorkView, Person_ExpectWork>(model);
    	}
    	public static Person_Follow EntityMap(this Person_FollowView model)
    	{
    		return Mapper.Map<Person_FollowView, Person_Follow>(model);
    	}
    	public static Person_Message EntityMap(this Person_MessageView model)
    	{
    		return Mapper.Map<Person_MessageView, Person_Message>(model);
    	}
    	public static Person_PayCheck EntityMap(this Person_PayCheckView model)
    	{
    		return Mapper.Map<Person_PayCheckView, Person_PayCheck>(model);
    	}
    	public static Person_Project EntityMap(this Person_ProjectView model)
    	{
    		return Mapper.Map<Person_ProjectView, Person_Project>(model);
    	}
    	public static Person_Report EntityMap(this Person_ReportView model)
    	{
    		return Mapper.Map<Person_ReportView, Person_Report>(model);
    	}
    	public static Person_Representations EntityMap(this Person_RepresentationsView model)
    	{
    		return Mapper.Map<Person_RepresentationsView, Person_Representations>(model);
    	}
    	public static Person_Reward EntityMap(this Person_RewardView model)
    	{
    		return Mapper.Map<Person_RewardView, Person_Reward>(model);
    	}
    	public static Person_Reward_Matching EntityMap(this Person_Reward_MatchingView model)
    	{
    		return Mapper.Map<Person_Reward_MatchingView, Person_Reward_Matching>(model);
    	}
    	public static Person_Skill EntityMap(this Person_SkillView model)
    	{
    		return Mapper.Map<Person_SkillView, Person_Skill>(model);
    	}
    	public static Person_Test EntityMap(this Person_TestView model)
    	{
    		return Mapper.Map<Person_TestView, Person_Test>(model);
    	}
    	public static Person_Work EntityMap(this Person_WorkView model)
    	{
    		return Mapper.Map<Person_WorkView, Person_Work>(model);
    	}
    	public static PostInfo EntityMap(this PostInfoView model)
    	{
    		return Mapper.Map<PostInfoView, PostInfo>(model);
    	}
    	public static PostType EntityMap(this PostTypeView model)
    	{
    		return Mapper.Map<PostTypeView, PostType>(model);
    	}
    	public static PresentApplication EntityMap(this PresentApplicationView model)
    	{
    		return Mapper.Map<PresentApplicationView, PresentApplication>(model);
    	}
    	public static PresentApplication_Batch EntityMap(this PresentApplication_BatchView model)
    	{
    		return Mapper.Map<PresentApplication_BatchView, PresentApplication_Batch>(model);
    	}
    	public static Reward_Order EntityMap(this Reward_OrderView model)
    	{
    		return Mapper.Map<Reward_OrderView, Reward_Order>(model);
    	}
    	public static Role EntityMap(this RoleView model)
    	{
    		return Mapper.Map<RoleView, Role>(model);
    	}
    	public static ServerUser EntityMap(this ServerUserView model)
    	{
    		return Mapper.Map<ServerUserView, ServerUser>(model);
    	}
    	public static ServerUser_BlackList EntityMap(this ServerUser_BlackListView model)
    	{
    		return Mapper.Map<ServerUser_BlackListView, ServerUser_BlackList>(model);
    	}
    	public static ServerUser_Collection EntityMap(this ServerUser_CollectionView model)
    	{
    		return Mapper.Map<ServerUser_CollectionView, ServerUser_Collection>(model);
    	}
    	public static ServerUser_Education EntityMap(this ServerUser_EducationView model)
    	{
    		return Mapper.Map<ServerUser_EducationView, ServerUser_Education>(model);
    	}
    	public static ServerUser_Evaluate EntityMap(this ServerUser_EvaluateView model)
    	{
    		return Mapper.Map<ServerUser_EvaluateView, ServerUser_Evaluate>(model);
    	}
    	public static ServerUser_Follow EntityMap(this ServerUser_FollowView model)
    	{
    		return Mapper.Map<ServerUser_FollowView, ServerUser_Follow>(model);
    	}
    	public static ServerUser_Message EntityMap(this ServerUser_MessageView model)
    	{
    		return Mapper.Map<ServerUser_MessageView, ServerUser_Message>(model);
    	}
    	public static ServerUser_Post EntityMap(this ServerUser_PostView model)
    	{
    		return Mapper.Map<ServerUser_PostView, ServerUser_Post>(model);
    	}
    	public static ServerUser_Report EntityMap(this ServerUser_ReportView model)
    	{
    		return Mapper.Map<ServerUser_ReportView, ServerUser_Report>(model);
    	}
    	public static ServerUser_Tag EntityMap(this ServerUser_TagView model)
    	{
    		return Mapper.Map<ServerUser_TagView, ServerUser_Tag>(model);
    	}
    	public static ServerUser_Work EntityMap(this ServerUser_WorkView model)
    	{
    		return Mapper.Map<ServerUser_WorkView, ServerUser_Work>(model);
    	}
    	public static Sys_Logs EntityMap(this Sys_LogsView model)
    	{
    		return Mapper.Map<Sys_LogsView, Sys_Logs>(model);
    	}
    	public static TransactionRecord EntityMap(this TransactionRecordView model)
    	{
    		return Mapper.Map<TransactionRecordView, TransactionRecord>(model);
    	}
    	public static User_Managers EntityMap(this User_ManagersView model)
    	{
    		return Mapper.Map<User_ManagersView, User_Managers>(model);
    	}
    	public static WelfareTag EntityMap(this WelfareTagView model)
    	{
    		return Mapper.Map<WelfareTagView, WelfareTag>(model);
    	}
    	public static aTemp EntityMap(this aTempView model)
    	{
    		return Mapper.Map<aTempView, aTemp>(model);
    	}
    	public static News EntityMap(this NewsView model)
    	{
    		return Mapper.Map<NewsView, News>(model);
    	}
    	public static NewsType EntityMap(this NewsTypeView model)
    	{
    		return Mapper.Map<NewsTypeView, NewsType>(model);
    	}
    	public static Person_Education EntityMap(this Person_EducationView model)
    	{
    		return Mapper.Map<Person_EducationView, Person_Education>(model);
    	}
    	public static PhoneCode EntityMap(this PhoneCodeView model)
    	{
    		return Mapper.Map<PhoneCodeView, PhoneCode>(model);
    	}
    	public static sys_City EntityMap(this sys_CityView model)
    	{
    		return Mapper.Map<sys_CityView, sys_City>(model);
    	}
    	public static View_News EntityMap(this View_NewsView model)
    	{
    		return Mapper.Map<View_NewsView, View_News>(model);
    	}
    	public static View_Person_Evaluate EntityMap(this View_Person_EvaluateView model)
    	{
    		return Mapper.Map<View_Person_EvaluateView, View_Person_Evaluate>(model);
    	}
    	public static View_Person_Order EntityMap(this View_Person_OrderView model)
    	{
    		return Mapper.Map<View_Person_OrderView, View_Person_Order>(model);
    	}
    	public static View_PersonFriend EntityMap(this View_PersonFriendView model)
    	{
    		return Mapper.Map<View_PersonFriendView, View_PersonFriend>(model);
    	}
    	public static View_PersonFriendApply EntityMap(this View_PersonFriendApplyView model)
    	{
    		return Mapper.Map<View_PersonFriendApplyView, View_PersonFriendApply>(model);
    	}
    	public static View_Representations EntityMap(this View_RepresentationsView model)
    	{
    		return Mapper.Map<View_RepresentationsView, View_Representations>(model);
    	}
    	public static View_Reward_Order EntityMap(this View_Reward_OrderView model)
    	{
    		return Mapper.Map<View_Reward_OrderView, View_Reward_Order>(model);
    	}
    	public static View_RewardList EntityMap(this View_RewardListView model)
    	{
    		return Mapper.Map<View_RewardListView, View_RewardList>(model);
    	}
    	public static View_SerUser_Reward_Mat_Post EntityMap(this View_SerUser_Reward_Mat_PostView model)
    	{
    		return Mapper.Map<View_SerUser_Reward_Mat_PostView, View_SerUser_Reward_Mat_Post>(model);
    	}
    	public static View_SerUserFriend EntityMap(this View_SerUserFriendView model)
    	{
    		return Mapper.Map<View_SerUserFriendView, View_SerUserFriend>(model);
    	}
    	public static View_SerUserOrderDetail EntityMap(this View_SerUserOrderDetailView model)
    	{
    		return Mapper.Map<View_SerUserOrderDetailView, View_SerUserOrderDetail>(model);
    	}
    	public static View_SerUserRewardDetail EntityMap(this View_SerUserRewardDetailView model)
    	{
    		return Mapper.Map<View_SerUserRewardDetailView, View_SerUserRewardDetail>(model);
    	}
    	public static View_SerUserReword EntityMap(this View_SerUserRewordView model)
    	{
    		return Mapper.Map<View_SerUserRewordView, View_SerUserReword>(model);
    	}
    	public static View_ServerUser_Evaluate EntityMap(this View_ServerUser_EvaluateView model)
    	{
    		return Mapper.Map<View_ServerUser_EvaluateView, View_ServerUser_Evaluate>(model);
    	}
    	public static View_ServerUser_Post EntityMap(this View_ServerUser_PostView model)
    	{
    		return Mapper.Map<View_ServerUser_PostView, View_ServerUser_Post>(model);
    	}
    	public static View_ServerUserFriendApply EntityMap(this View_ServerUserFriendApplyView model)
    	{
    		return Mapper.Map<View_ServerUserFriendApplyView, View_ServerUserFriendApply>(model);
    	}
    	public static View_SysLog EntityMap(this View_SysLogView model)
    	{
    		return Mapper.Map<View_SysLogView, View_SysLog>(model);
    	}
    	public static View_User_Managers EntityMap(this View_User_ManagersView model)
    	{
    		return Mapper.Map<View_User_ManagersView, View_User_Managers>(model);
    	}
    	public static WorkPostFilterInfo EntityMap(this WorkPostFilterInfoView model)
    	{
    		return Mapper.Map<WorkPostFilterInfoView, WorkPostFilterInfo>(model);
    	}
    	public static WorkPostFilterType EntityMap(this WorkPostFilterTypeView model)
    	{
    		return Mapper.Map<WorkPostFilterTypeView, WorkPostFilterType>(model);
    	}
    	public static View_WorkPostFilterInfo EntityMap(this View_WorkPostFilterInfoView model)
    	{
    		return Mapper.Map<View_WorkPostFilterInfoView, View_WorkPostFilterInfo>(model);
    	}
    	public static View_CompnayInfo EntityMap(this View_CompnayInfoView model)
    	{
    		return Mapper.Map<View_CompnayInfoView, View_CompnayInfo>(model);
    	}
    	public static View_PersonInfo EntityMap(this View_PersonInfoView model)
    	{
    		return Mapper.Map<View_PersonInfoView, View_PersonInfo>(model);
    	}
    	public static View_ServerUserInfo EntityMap(this View_ServerUserInfoView model)
    	{
    		return Mapper.Map<View_ServerUserInfoView, View_ServerUserInfo>(model);
    	}
    	public static View_NewsestRecruit EntityMap(this View_NewsestRecruitView model)
    	{
    		return Mapper.Map<View_NewsestRecruitView, View_NewsestRecruit>(model);
    	}
    
        //3.0.2 ModelView -> Model
    	public static CareerPlanningView EntityMap(this CareerPlanning model)
    	{
    		return Mapper.Map<CareerPlanning, CareerPlanningView>(model);
    	}
    	public static ChannelCnvestmentView EntityMap(this ChannelCnvestment model)
    	{
    		return Mapper.Map<ChannelCnvestment, ChannelCnvestmentView>(model);
    	}
    	public static ChatReacordView EntityMap(this ChatReacord model)
    	{
    		return Mapper.Map<ChatReacord, ChatReacordView>(model);
    	}
    	public static CooperativePartnerView EntityMap(this CooperativePartner model)
    	{
    		return Mapper.Map<CooperativePartner, CooperativePartnerView>(model);
    	}
    	public static FeedBackView EntityMap(this FeedBack model)
    	{
    		return Mapper.Map<FeedBack, FeedBackView>(model);
    	}
    	public static FriendApplyView EntityMap(this FriendApply model)
    	{
    		return Mapper.Map<FriendApply, FriendApplyView>(model);
    	}
    	public static FriendView EntityMap(this Friend model)
    	{
    		return Mapper.Map<Friend, FriendView>(model);
    	}
    	public static JobTrainingView EntityMap(this JobTraining model)
    	{
    		return Mapper.Map<JobTraining, JobTrainingView>(model);
    	}
    	public static OrderTimeView EntityMap(this OrderTime model)
    	{
    		return Mapper.Map<OrderTime, OrderTimeView>(model);
    	}
    	public static PersonView EntityMap(this Person model)
    	{
    		return Mapper.Map<Person, PersonView>(model);
    	}
    	public static Person_BlackListView EntityMap(this Person_BlackList model)
    	{
    		return Mapper.Map<Person_BlackList, Person_BlackListView>(model);
    	}
    	public static Person_CollectionView EntityMap(this Person_Collection model)
    	{
    		return Mapper.Map<Person_Collection, Person_CollectionView>(model);
    	}
    	public static Person_EvaluateView EntityMap(this Person_Evaluate model)
    	{
    		return Mapper.Map<Person_Evaluate, Person_EvaluateView>(model);
    	}
    	public static Person_ExpectWorkView EntityMap(this Person_ExpectWork model)
    	{
    		return Mapper.Map<Person_ExpectWork, Person_ExpectWorkView>(model);
    	}
    	public static Person_FollowView EntityMap(this Person_Follow model)
    	{
    		return Mapper.Map<Person_Follow, Person_FollowView>(model);
    	}
    	public static Person_MessageView EntityMap(this Person_Message model)
    	{
    		return Mapper.Map<Person_Message, Person_MessageView>(model);
    	}
    	public static Person_PayCheckView EntityMap(this Person_PayCheck model)
    	{
    		return Mapper.Map<Person_PayCheck, Person_PayCheckView>(model);
    	}
    	public static Person_ProjectView EntityMap(this Person_Project model)
    	{
    		return Mapper.Map<Person_Project, Person_ProjectView>(model);
    	}
    	public static Person_ReportView EntityMap(this Person_Report model)
    	{
    		return Mapper.Map<Person_Report, Person_ReportView>(model);
    	}
    	public static Person_RepresentationsView EntityMap(this Person_Representations model)
    	{
    		return Mapper.Map<Person_Representations, Person_RepresentationsView>(model);
    	}
    	public static Person_RewardView EntityMap(this Person_Reward model)
    	{
    		return Mapper.Map<Person_Reward, Person_RewardView>(model);
    	}
    	public static Person_Reward_MatchingView EntityMap(this Person_Reward_Matching model)
    	{
    		return Mapper.Map<Person_Reward_Matching, Person_Reward_MatchingView>(model);
    	}
    	public static Person_SkillView EntityMap(this Person_Skill model)
    	{
    		return Mapper.Map<Person_Skill, Person_SkillView>(model);
    	}
    	public static Person_TestView EntityMap(this Person_Test model)
    	{
    		return Mapper.Map<Person_Test, Person_TestView>(model);
    	}
    	public static Person_WorkView EntityMap(this Person_Work model)
    	{
    		return Mapper.Map<Person_Work, Person_WorkView>(model);
    	}
    	public static PostInfoView EntityMap(this PostInfo model)
    	{
    		return Mapper.Map<PostInfo, PostInfoView>(model);
    	}
    	public static PostTypeView EntityMap(this PostType model)
    	{
    		return Mapper.Map<PostType, PostTypeView>(model);
    	}
    	public static PresentApplicationView EntityMap(this PresentApplication model)
    	{
    		return Mapper.Map<PresentApplication, PresentApplicationView>(model);
    	}
    	public static PresentApplication_BatchView EntityMap(this PresentApplication_Batch model)
    	{
    		return Mapper.Map<PresentApplication_Batch, PresentApplication_BatchView>(model);
    	}
    	public static Reward_OrderView EntityMap(this Reward_Order model)
    	{
    		return Mapper.Map<Reward_Order, Reward_OrderView>(model);
    	}
    	public static RoleView EntityMap(this Role model)
    	{
    		return Mapper.Map<Role, RoleView>(model);
    	}
    	public static ServerUserView EntityMap(this ServerUser model)
    	{
    		return Mapper.Map<ServerUser, ServerUserView>(model);
    	}
    	public static ServerUser_BlackListView EntityMap(this ServerUser_BlackList model)
    	{
    		return Mapper.Map<ServerUser_BlackList, ServerUser_BlackListView>(model);
    	}
    	public static ServerUser_CollectionView EntityMap(this ServerUser_Collection model)
    	{
    		return Mapper.Map<ServerUser_Collection, ServerUser_CollectionView>(model);
    	}
    	public static ServerUser_EducationView EntityMap(this ServerUser_Education model)
    	{
    		return Mapper.Map<ServerUser_Education, ServerUser_EducationView>(model);
    	}
    	public static ServerUser_EvaluateView EntityMap(this ServerUser_Evaluate model)
    	{
    		return Mapper.Map<ServerUser_Evaluate, ServerUser_EvaluateView>(model);
    	}
    	public static ServerUser_FollowView EntityMap(this ServerUser_Follow model)
    	{
    		return Mapper.Map<ServerUser_Follow, ServerUser_FollowView>(model);
    	}
    	public static ServerUser_MessageView EntityMap(this ServerUser_Message model)
    	{
    		return Mapper.Map<ServerUser_Message, ServerUser_MessageView>(model);
    	}
    	public static ServerUser_PostView EntityMap(this ServerUser_Post model)
    	{
    		return Mapper.Map<ServerUser_Post, ServerUser_PostView>(model);
    	}
    	public static ServerUser_ReportView EntityMap(this ServerUser_Report model)
    	{
    		return Mapper.Map<ServerUser_Report, ServerUser_ReportView>(model);
    	}
    	public static ServerUser_TagView EntityMap(this ServerUser_Tag model)
    	{
    		return Mapper.Map<ServerUser_Tag, ServerUser_TagView>(model);
    	}
    	public static ServerUser_WorkView EntityMap(this ServerUser_Work model)
    	{
    		return Mapper.Map<ServerUser_Work, ServerUser_WorkView>(model);
    	}
    	public static Sys_LogsView EntityMap(this Sys_Logs model)
    	{
    		return Mapper.Map<Sys_Logs, Sys_LogsView>(model);
    	}
    	public static TransactionRecordView EntityMap(this TransactionRecord model)
    	{
    		return Mapper.Map<TransactionRecord, TransactionRecordView>(model);
    	}
    	public static User_ManagersView EntityMap(this User_Managers model)
    	{
    		return Mapper.Map<User_Managers, User_ManagersView>(model);
    	}
    	public static WelfareTagView EntityMap(this WelfareTag model)
    	{
    		return Mapper.Map<WelfareTag, WelfareTagView>(model);
    	}
    	public static aTempView EntityMap(this aTemp model)
    	{
    		return Mapper.Map<aTemp, aTempView>(model);
    	}
    	public static NewsView EntityMap(this News model)
    	{
    		return Mapper.Map<News, NewsView>(model);
    	}
    	public static NewsTypeView EntityMap(this NewsType model)
    	{
    		return Mapper.Map<NewsType, NewsTypeView>(model);
    	}
    	public static Person_EducationView EntityMap(this Person_Education model)
    	{
    		return Mapper.Map<Person_Education, Person_EducationView>(model);
    	}
    	public static PhoneCodeView EntityMap(this PhoneCode model)
    	{
    		return Mapper.Map<PhoneCode, PhoneCodeView>(model);
    	}
    	public static sys_CityView EntityMap(this sys_City model)
    	{
    		return Mapper.Map<sys_City, sys_CityView>(model);
    	}
    	public static View_NewsView EntityMap(this View_News model)
    	{
    		return Mapper.Map<View_News, View_NewsView>(model);
    	}
    	public static View_Person_EvaluateView EntityMap(this View_Person_Evaluate model)
    	{
    		return Mapper.Map<View_Person_Evaluate, View_Person_EvaluateView>(model);
    	}
    	public static View_Person_OrderView EntityMap(this View_Person_Order model)
    	{
    		return Mapper.Map<View_Person_Order, View_Person_OrderView>(model);
    	}
    	public static View_PersonFriendView EntityMap(this View_PersonFriend model)
    	{
    		return Mapper.Map<View_PersonFriend, View_PersonFriendView>(model);
    	}
    	public static View_PersonFriendApplyView EntityMap(this View_PersonFriendApply model)
    	{
    		return Mapper.Map<View_PersonFriendApply, View_PersonFriendApplyView>(model);
    	}
    	public static View_RepresentationsView EntityMap(this View_Representations model)
    	{
    		return Mapper.Map<View_Representations, View_RepresentationsView>(model);
    	}
    	public static View_Reward_OrderView EntityMap(this View_Reward_Order model)
    	{
    		return Mapper.Map<View_Reward_Order, View_Reward_OrderView>(model);
    	}
    	public static View_RewardListView EntityMap(this View_RewardList model)
    	{
    		return Mapper.Map<View_RewardList, View_RewardListView>(model);
    	}
    	public static View_SerUser_Reward_Mat_PostView EntityMap(this View_SerUser_Reward_Mat_Post model)
    	{
    		return Mapper.Map<View_SerUser_Reward_Mat_Post, View_SerUser_Reward_Mat_PostView>(model);
    	}
    	public static View_SerUserFriendView EntityMap(this View_SerUserFriend model)
    	{
    		return Mapper.Map<View_SerUserFriend, View_SerUserFriendView>(model);
    	}
    	public static View_SerUserOrderDetailView EntityMap(this View_SerUserOrderDetail model)
    	{
    		return Mapper.Map<View_SerUserOrderDetail, View_SerUserOrderDetailView>(model);
    	}
    	public static View_SerUserRewardDetailView EntityMap(this View_SerUserRewardDetail model)
    	{
    		return Mapper.Map<View_SerUserRewardDetail, View_SerUserRewardDetailView>(model);
    	}
    	public static View_SerUserRewordView EntityMap(this View_SerUserReword model)
    	{
    		return Mapper.Map<View_SerUserReword, View_SerUserRewordView>(model);
    	}
    	public static View_ServerUser_EvaluateView EntityMap(this View_ServerUser_Evaluate model)
    	{
    		return Mapper.Map<View_ServerUser_Evaluate, View_ServerUser_EvaluateView>(model);
    	}
    	public static View_ServerUser_PostView EntityMap(this View_ServerUser_Post model)
    	{
    		return Mapper.Map<View_ServerUser_Post, View_ServerUser_PostView>(model);
    	}
    	public static View_ServerUserFriendApplyView EntityMap(this View_ServerUserFriendApply model)
    	{
    		return Mapper.Map<View_ServerUserFriendApply, View_ServerUserFriendApplyView>(model);
    	}
    	public static View_SysLogView EntityMap(this View_SysLog model)
    	{
    		return Mapper.Map<View_SysLog, View_SysLogView>(model);
    	}
    	public static View_User_ManagersView EntityMap(this View_User_Managers model)
    	{
    		return Mapper.Map<View_User_Managers, View_User_ManagersView>(model);
    	}
    	public static WorkPostFilterInfoView EntityMap(this WorkPostFilterInfo model)
    	{
    		return Mapper.Map<WorkPostFilterInfo, WorkPostFilterInfoView>(model);
    	}
    	public static WorkPostFilterTypeView EntityMap(this WorkPostFilterType model)
    	{
    		return Mapper.Map<WorkPostFilterType, WorkPostFilterTypeView>(model);
    	}
    	public static View_WorkPostFilterInfoView EntityMap(this View_WorkPostFilterInfo model)
    	{
    		return Mapper.Map<View_WorkPostFilterInfo, View_WorkPostFilterInfoView>(model);
    	}
    	public static View_CompnayInfoView EntityMap(this View_CompnayInfo model)
    	{
    		return Mapper.Map<View_CompnayInfo, View_CompnayInfoView>(model);
    	}
    	public static View_PersonInfoView EntityMap(this View_PersonInfo model)
    	{
    		return Mapper.Map<View_PersonInfo, View_PersonInfoView>(model);
    	}
    	public static View_ServerUserInfoView EntityMap(this View_ServerUserInfo model)
    	{
    		return Mapper.Map<View_ServerUserInfo, View_ServerUserInfoView>(model);
    	}
    	public static View_NewsestRecruitView EntityMap(this View_NewsestRecruit model)
    	{
    		return Mapper.Map<View_NewsestRecruit, View_NewsestRecruitView>(model);
    	}
    }
}
